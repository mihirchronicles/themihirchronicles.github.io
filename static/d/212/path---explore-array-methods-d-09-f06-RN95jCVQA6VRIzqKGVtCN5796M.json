{"data":{"markdownRemark":{"html":"<p><code class=\"language-text\">Array.prototype</code> methods are super useful for transforming array data and cover a lot of common needs in modern applications! They are a form of higher-order function (HOC), which are functions that take another function as their argument, or return one as a result. A good way to view functions is as values, because then it's easier to imagine being able to pass them around. For me, they've been a great introduction into the world of functional programming. In functional programming, the functions you create are <em>pure</em>, i.e. they have no side effects, rely on the input you give them, and will always produce the same output given the same input.</p>\n<p>So, I use array methods more and more at work and they are definitely a pleasure to work with! There are quite a lot of them (I think around 50), but there are some more frequently used ones that cover most use cases, such as <code class=\"language-text\">sort()</code>, <code class=\"language-text\">map()</code>, <code class=\"language-text\">filter()</code>, and <code class=\"language-text\">reduce()</code>. I was inspired to write about them after reading <a href=\"https://hackernoon.com/a-quick-introduction-to-functional-javascript-7e6fe520e7fa\">this</a> post by <a href=\"https://twitter.com/chalarangelo\">Angelos Chalaris</a>! Please check out his post because there are <em>great</em> examples &#x26; explanations in there!</p>\n<p>Of course, since I like them so much, I wanted to give an example here. The one I used most at work is <code class=\"language-text\">map()</code> but I didn't choose it because I gave an example of it in <a href=\"https://amberwilson.co.uk/blog/wilt100days/#arrowfunctions\">Day 2</a> :) As a side note, if you look carefully at the example in Day 2's lesson, you'll see how the elements array takes the map function, which in turn takes a function as its input, and returns a value based on the input. Below, I decided to create an example of <code class=\"language-text\">reduce()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initialCatRating <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> accurateCatRating <span class=\"token operator\">=</span> initialCatRating<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    total<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naccurateCatRating <span class=\"token comment\">// [20, 20, 20]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This example shows one of the <strong>many</strong> things reduce can do - alter values in an array, and push the altered values into a new array! This means a brand new array is returned, rather than altering the initial array. Let me explain what's happening:</p>\n<p>There is an <code class=\"language-text\">initialCatRating</code> variable, which shows ratings of cats out of ten. In the <code class=\"language-text\">accurateCatRating</code> variable, <code class=\"language-text\">reduce()</code> is called on <code class=\"language-text\">initialCatRating</code>.</p>\n<p>The first argument in <code class=\"language-text\">reduce()</code> is a callback function (see this in <span class=\"text__highlight\">pink</span> above). The callback takes at least two and up to four arguments (<code class=\"language-text\">accumulator, currentValue, currentIndex, array</code>). The above example has taken two - <code class=\"language-text\">total</code> and <code class=\"language-text\">amount</code>, which are actually <code class=\"language-text\">accumulator</code> and <code class=\"language-text\">currentValue</code>. Naming doesn't matter here, but order does.</p>\n<p>The second argument in <code class=\"language-text\">reduce()</code> is <code class=\"language-text\">initialValue</code>, which is optional. In the above example, <code class=\"language-text\">initialValue</code> is an empty array. The callback only operates on every element in an <em>array</em> when <code class=\"language-text\">initialValue</code> is present, so for the above example it is not optional.</p>\n<p>Putting the callback and <code class=\"language-text\">initialValue</code> together allows <code class=\"language-text\">reduce()</code> to take each element in the given array and operate on it, then push the returned values (using <code class=\"language-text\">push()</code> - another array method) into a new array.</p>\n<p>Of course, to make it re-usable, you can extract the callback function from the above example into something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doubleMyValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    total<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then, it can be put straight into <code class=\"language-text\">reduce()</code> (as an argument), to read:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> initialCatRating <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> accurateCatRating <span class=\"token operator\">=</span> initialCatRating<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>doubleMyValue <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naccurateCatRating <span class=\"token comment\">// [20, 20, 20]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">reduce()</code> callback above is actually not a pure function, because it modifies one of its parameters. To keep <code class=\"language-text\">reduce()</code> pure/functional, the callback can only take primitive values. See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">MDN</a> article for examples. And see some more examples <a href=\"https://medium.freecodecamp.org/reduce-f47a7da511a9\">here</a>. Try some <code class=\"language-text\">Array.prototype</code> methods out in your browser console! :)</p>","frontmatter":{"date":"02 July, 2018","path":"/explore/array-methods","title":"Array Prototype Methods"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}