{"data":{"markdownRemark":{"html":"<ul>\n<li>A sequence containing some letters, numbers or symbols.</li>\n<li>Have available methods and properties.</li>\n<li>Can be stored in variables.</li>\n<li>Sit between either single quotes (<code class=\"language-text\">&#39; &#39;</code>), double quotes (<code class=\"language-text\">&quot; &quot;</code>), or backticks ( \"<code class=\"language-text\">&quot; &quot;</code>\").</li>\n<li>Can be concatenated (stuck together) with the <code class=\"language-text\">+</code> operator, or with backticks (template strings) in ES6.</li>\n<li>Template strings, or template literals, can take any valid JavaScript expression, allowing dynamic strings.</li>\n<li>Can contain special characters, such as quotation marks, as long as they are escaped - e.g. <code class=\"language-text\">&quot;She&#39;\\ll be coming &#39;\\round the mountain when she comes&quot;</code>.</li>\n<li>There's no need to escape dissimilar quote marks. For example: \"This 'is' fine\". This is probably why we tend to favour double quotes in HTML attribute values, and singles in JS (since it allows you to create some innerHTML without the need for escaping).</li>\n<li>When using template literals, you don't need to escape <code class=\"language-text\">&#39;</code> or <code class=\"language-text\">&quot;</code> ... and <code class=\"language-text\">this` `&quot;is&quot;` `&#39;also&#39;` `fine</code></li>\n<li>Is either a <em>string primitive</em> - immutable and more common, e.g. <code class=\"language-text\">const stringPrimitive = &quot;Hello, I am a string.&quot;;</code> .</li>\n<li>Or a <em>string object</em> - <code class=\"language-text\">const stringObject = new String(&quot;Hello, I am a string.&quot;);</code></li>\n<li>The <code class=\"language-text\">typeof</code> operator is used to determine if a string's type is <em>string</em> or <em>object</em>.</li>\n<li>Each character is indexed and can be accessed by an index number using square bracket notation (e.g. \"Hello World\" - <code class=\"language-text\">myString[0]</code> outputs \"H\").</li>\n<li>Similar methods to the one above include: <code class=\"language-text\">charAt()</code>, <code class=\"language-text\">indexOf()</code>, <code class=\"language-text\">lastIndexOf()</code>, <code class=\"language-text\">slice()</code>.</li>\n<li>Other common methods and properties are: <code class=\"language-text\">length</code>, <code class=\"language-text\">toUpperCase()</code>, <code class=\"language-text\">toLowerCase()</code>, <code class=\"language-text\">split()</code>, <code class=\"language-text\">trim()</code>, <code class=\"language-text\">replace()</code>.</li>\n</ul>\n<p>This list is meant as a quick and basic introduction to the magical world of JavaScript strings. If there's something you'd like me to add, let me know!</p>\n<p>Many thanks to my good friend <a href=\"https://twitter.com/qubyte\">Mark</a> for suggesting additions :)</p>","frontmatter":{"date":"01 July, 2018","path":"/explore/strings","title":"Strings"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}